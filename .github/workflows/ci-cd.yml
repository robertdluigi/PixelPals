name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout Code
      - name: Checkout code
        uses: actions/checkout@v3

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login --username "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Check if frontend has changed and build and push if necessary
      - name: Check if frontend has changed
        id: frontend-changes
        run: |
          git diff --exit-code ./frontend || echo "Frontend has changed"

      - name: Build and push frontend Docker image
        if: steps.frontend-changes.outputs.changed == 'true'
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/pixelpals-frontend:v1.0 ./frontend
          docker push ${{ secrets.DOCKER_USERNAME }}/pixelpals-frontend:v1.0

      # Check if backend has changed and build and push if necessary
      - name: Check if backend has changed
        id: backend-changes
        run: |
          git diff --exit-code ./backend || echo "Backend has changed"

      - name: Build and push backend Docker image
        if: steps.backend-changes.outputs.changed == 'true'
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/pixelpals-backend:v1.0 ./backend
          docker push ${{ secrets.DOCKER_USERNAME }}/pixelpals-backend:v1.0

      # Deploy to Ubuntu Server with zero downtime deployment
      - name: Deploy application to Ubuntu server
        run: |
          # Save the private key to a file
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Check the private key exists and debug if necessary
          ls -al ~/.ssh
          cat ~/.ssh/id_rsa

          # Add the server's SSH key fingerprint to known hosts to avoid host verification prompt
          ssh-keyscan -p 2222 ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

          # SSH and Deploy to the server using the private key
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -p 2222 ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << EOF
           # Navigate to the home directory
            cd ~
            # Create the pixelpals directory if it doesn't exist
            if [ ! -d "pixelpals" ]; then
              git clone https://github.com/your-username/pixelpals.git
            fi
            # Navigate to the project folder
            cd ~/pixelpals

            # Pull latest code (this does not interrupt the running services)
            git pull origin main

            # Pull the latest Docker images (only if they have changed)
            docker-compose pull frontend backend

            # Use docker-compose to update the containers (this ensures minimal downtime)
            docker-compose up -d --no-deps frontend backend

            # Ensure the backend container is running and listening
            docker inspect -f '{{.State.Running}}' pixelpals-backend || docker-compose up -d pixelpals-backend
          EOF
